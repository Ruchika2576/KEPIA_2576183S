{"ast":null,"code":"var _jsxFileName = \"/Users/ruchikasinghi/Desktop/KEPIA/KEPIA/KEPIA/src/streamlit-custom-fileupload/template/custom_fileupload/frontend/src/CustomFileUpload.tsx\";\nimport React, { useEffect } from \"react\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\n\nconst CustomFileUpload = () => {\n  useEffect(() => Streamlit.setFrameHeight());\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 10\n    }\n  }, \"hello Ruchika this is the custom file upload component\");\n};\n\nexport default withStreamlitConnection(CustomFileUpload); // // import {\n// //   Streamlit,\n// //   StreamlitComponentBase,\n// //   withStreamlitConnection,\n// // } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n//\n// // interface State {\n// //   numClicks: number\n// //   isFocused: boolean\n// // }\n//\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class CustomFileUpload extends StreamlitComponentBase<State> {\n//   // public state = { numClicks: 0, isFocused: false }\n//\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     // const name = this.props.args[\"name\"]\n//\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     // const style: React.CSSProperties = {}\n//     //\n//     // // Maintain compatibility with older versions of Streamlit that don't send\n//     // // a theme object.\n//     // if (theme) {\n//     //   // Use the theme object to style our button border. Alternatively, the\n//     //   // theme style is defined in CSS vars.\n//     //   const borderStyling = `1px solid ${\n//     //     this.state.isFocused ? theme.primaryColor : \"gray\"\n//     //   }`\n//     //   style.border = borderStyling\n//     //   style.outline = borderStyling\n//     // }\n//\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//       <h1>  Hello, Ruchika</h1>\n//         // <button\n//         //   style={style}\n//         //   onClick={this.onClicked}\n//         //   disabled={this.props.disabled}\n//         //   onFocus={this._onFocus}\n//         //   onBlur={this._onBlur}\n//         // >\n//         //   Click Me!\n//         // </button>\n//       </span>\n//     )\n//   }\n// }\n//\n// //   /** Click handler for our \"Click Me!\" button. */\n// //   private onClicked = (): void => {\n// //     // Increment state.numClicks, and pass the new value back to\n// //     // Streamlit via `Streamlit.setComponentValue`.\n// //     this.setState(\n// //       prevState => ({ numClicks: prevState.numClicks + 1 }),\n// //       () => Streamlit.setComponentValue(this.state.numClicks)\n// //     )\n// //   }\n// //\n// //   /** Focus handler for our \"Click Me!\" button. */\n// //   private _onFocus = (): void => {\n// //     this.setState({ isFocused: true })\n// //   }\n// //\n// //   /** Blur handler for our \"Click Me!\" button. */\n// //   private _onBlur = (): void => {\n// //     this.setState({ isFocused: false })\n// //   }\n// // }\n//\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).","map":{"version":3,"sources":["/Users/ruchikasinghi/Desktop/KEPIA/KEPIA/KEPIA/src/streamlit-custom-fileupload/template/custom_fileupload/frontend/src/CustomFileUpload.tsx"],"names":["React","useEffect","Streamlit","withStreamlitConnection","CustomFileUpload","setFrameHeight"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,SADF,EAEEC,uBAFF,QAGO,yBAHP;;AAKA,MAAMC,gBAAgB,GAAG,MAAI;AAC3BH,EAAAA,SAAS,CAAE,MAAMC,SAAS,CAACG,cAAV,EAAR,CAAT;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAP;AACD,CAHD;;AAKA,eAAeF,uBAAuB,CAACC,gBAAD,CAAtC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\"\nimport {\n  Streamlit,\n  withStreamlitConnection\n} from \"streamlit-component-lib\"\n\nconst CustomFileUpload = ()=>{\n  useEffect (() => Streamlit.setFrameHeight());\n  return <h1>hello Ruchika this is the custom file upload component</h1> ;\n};\n\nexport default withStreamlitConnection(CustomFileUpload);\n\n// // import {\n// //   Streamlit,\n// //   StreamlitComponentBase,\n// //   withStreamlitConnection,\n// // } from \"streamlit-component-lib\"\n// import React, { ReactNode } from \"react\"\n//\n// // interface State {\n// //   numClicks: number\n// //   isFocused: boolean\n// // }\n//\n// /**\n//  * This is a React-based component template. The `render()` function is called\n//  * automatically when your component should be re-rendered.\n//  */\n// class CustomFileUpload extends StreamlitComponentBase<State> {\n//   // public state = { numClicks: 0, isFocused: false }\n//\n//   public render = (): ReactNode => {\n//     // Arguments that are passed to the plugin in Python are accessible\n//     // via `this.props.args`. Here, we access the \"name\" arg.\n//     // const name = this.props.args[\"name\"]\n//\n//     // Streamlit sends us a theme object via props that we can use to ensure\n//     // that our component has visuals that match the active theme in a\n//     // streamlit app.\n//     // const { theme } = this.props\n//     // const style: React.CSSProperties = {}\n//     //\n//     // // Maintain compatibility with older versions of Streamlit that don't send\n//     // // a theme object.\n//     // if (theme) {\n//     //   // Use the theme object to style our button border. Alternatively, the\n//     //   // theme style is defined in CSS vars.\n//     //   const borderStyling = `1px solid ${\n//     //     this.state.isFocused ? theme.primaryColor : \"gray\"\n//     //   }`\n//     //   style.border = borderStyling\n//     //   style.outline = borderStyling\n//     // }\n//\n//     // Show a button and some text.\n//     // When the button is clicked, we'll increment our \"numClicks\" state\n//     // variable, and send its new value back to Streamlit, where it'll\n//     // be available to the Python program.\n//     return (\n//       <span>\n//       <h1>  Hello, Ruchika</h1>\n//         // <button\n//         //   style={style}\n//         //   onClick={this.onClicked}\n//         //   disabled={this.props.disabled}\n//         //   onFocus={this._onFocus}\n//         //   onBlur={this._onBlur}\n//         // >\n//         //   Click Me!\n//         // </button>\n//       </span>\n//     )\n//   }\n// }\n//\n// //   /** Click handler for our \"Click Me!\" button. */\n// //   private onClicked = (): void => {\n// //     // Increment state.numClicks, and pass the new value back to\n// //     // Streamlit via `Streamlit.setComponentValue`.\n// //     this.setState(\n// //       prevState => ({ numClicks: prevState.numClicks + 1 }),\n// //       () => Streamlit.setComponentValue(this.state.numClicks)\n// //     )\n// //   }\n// //\n// //   /** Focus handler for our \"Click Me!\" button. */\n// //   private _onFocus = (): void => {\n// //     this.setState({ isFocused: true })\n// //   }\n// //\n// //   /** Blur handler for our \"Click Me!\" button. */\n// //   private _onBlur = (): void => {\n// //     this.setState({ isFocused: false })\n// //   }\n// // }\n//\n// // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// // connection between your component and the Streamlit app, and handles\n// // passing arguments from Python -> Component.\n// //\n// // You don't need to edit withStreamlitConnection (but you're welcome to!).\n"]},"metadata":{},"sourceType":"module"}